@page "/statistics"
@page "/statistics/{vanity}"

@using System.Security.Claims
@using System.Diagnostics
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<Statistics> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>@subTitle</h1>
<a href="/UrlManager/"> &lt;&lt; Back</a>

<div id="stats">
    @if (clickStatsEntities != null)
    {
        if (clickStatsEntities.Count == 0)
        {
            <div>No Click Data</div>
        }
        else
        {
            <SfChart Title="Click Stats">
                <ChartEvents />
                <ChartArea><ChartAreaBorder Width="1"></ChartAreaBorder></ChartArea>
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime"
                                   LabelFormat="MM/dd/yyy"
                                   EdgeLabelPlacement="EdgeLabelPlacement.Shift" RangePadding="ChartRangePadding.Auto">
                    <ChartAxisMajorGridLines Width="1"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>

                <ChartPrimaryYAxis LabelFormat="{value}">
                    <ChartAxisLineStyle Width="1"></ChartAxisLineStyle>
                    <ChartAxisMajorTickLines Width="1"></ChartAxisMajorTickLines>
                </ChartPrimaryYAxis>
                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>

                <ChartSeriesCollection>
                    <ChartSeries DataSource="@clickStatsEntities.GroupBy(s => s.Date.Date).Select(stat => new { DateClicked = stat.Key, Count = stat.Count() }).ToList()"
                                 Name="Click(s) by Day"
                                 XName="DateClicked"
                                 YName="Count"
                                 Type="ChartSeriesType.Line">
                        <ChartMarker Visible="true"></ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>

            </SfChart>

            <div style="display: flex; justify-content: space-around;">
                <SfAccumulationChart Title="ShortUrl Statistics" Width="200px">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@clickStatsEntities.GroupBy(a=> a.ShortUrl).Select(stat => new { ShortUrl = stat.Key, Count = stat.Count() })"
                                                 XName="ShortUrl" YName="Count" Name="ShortUrl">
                            <AccumulationDataLabelSettings Visible="true" />
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>

                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                </SfAccumulationChart>

                <SfAccumulationChart Title="Platform Statistics" Width="200px">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@clickStatsEntities.GroupBy(a=> a.Platform).Select(stat => new { Platform = stat.Key, Count = stat.Count() })"
                                                 XName="Platform" YName="Count" Name="Platform">
                            <AccumulationDataLabelSettings Visible="true" />
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>

                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                </SfAccumulationChart>

                <SfAccumulationChart Title="Mobile Browser Statistics" Width="200px">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@clickStatsEntities.GroupBy(a=> a.Browser).Select(stat => new { Browser = stat.Key, Count = stat.Count() })"
                                                 XName="Browser" YName="Count" Name="Browser">
                            <AccumulationDataLabelSettings Visible="true" />
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>

                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                </SfAccumulationChart>

                <SfAccumulationChart Title="Device Type Statistics" Width="200px">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@clickStatsEntities.GroupBy(a => a.IsDesktop).Select(stat => new { DeviceType = stat.Key ? "Desktop" : "Mobile", Count = stat.Count() })"
                                                 XName="DeviceType" YName="Count" Name="DeviceType">
                            <AccumulationDataLabelSettings Visible="true" />
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>

                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                </SfAccumulationChart>
            </div>

            <SfAccordion>
                <AccordionItems>
                    <AccordionItem>
                        <HeaderTemplate>
                            <h3>Click Data</h3>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <SfGrid DataSource="@clickStatsEntities" id="grdStats" AllowPaging="true" AllowSorting="true">
                                <GridPageSettings PageSize="50"></GridPageSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(ClickStatsEntity.Date) HeaderText="Timestamp" Format="MM/dd/yyyy hh:mm:ss tt" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="200"></GridColumn>
                                    <GridColumn Field=@nameof(ClickStatsEntity.Page) HeaderText="Page"></GridColumn>
                                    <GridColumn Field=@nameof(ClickStatsEntity.ShortUrl) HeaderText="ShortUrl"></GridColumn>
                                    <GridColumn Field=@nameof(ClickStatsEntity.BrowserWithVersion) HeaderText="Browser"></GridColumn>
                                    <GridColumn Field=@nameof(ClickStatsEntity.PlatformWithVersion) HeaderText="Platform"></GridColumn>
                                    <GridColumn Field=@nameof(ClickStatsEntity.ReferrerUrl) HeaderText="ReferrerUrl"></GridColumn>
                                </GridColumns>
                            </SfGrid>
                        </ContentTemplate>
                    </AccordionItem>
                </AccordionItems>
            </SfAccordion>
        }
    }
    else
    {
        <SfSpinner Size="40" Label="Counting all those clicks..." Type="Syncfusion.Blazor.Spinner.SpinnerType.Material" Visible="@isLoading"></SfSpinner>
    }
</div>

@code {



    [Parameter]
#nullable enable
    public string? vanity { get; set; }
#nullable disable

    private bool isLoading { get; set; } = true;
    private string subTitle = "";

    private ObservableCollection<ClickStatsEntity> clickStatsEntities;
    private readonly Random _random = new Random();
    private string dayCount = string.Empty;
    ClaimsPrincipal User;

    public class ClickData
    {
#nullable enable
        public string? XValue;
#nullable disable
        public int YValue;
    }

    private async Task<ObservableCollection<ClickStatsEntity>> UpdateUIList()
    {
        subTitle = (!String.IsNullOrEmpty(vanity)) ? $"Click Stats for: {vanity}" : "All Click Stats";
        try
        {
            CancellationToken cancellationToken = new CancellationToken();
            using var response = await Http.PostAsJsonAsync("/api/UrlStats", new UrlClickStatsRequest(vanity), cancellationToken);

            if (response.IsSuccessStatusCode)
            {
                var jsonResult = await response.Content.ReadAsStringAsync();
                var clickStatsList = JsonSerializer.Deserialize<ClickStatsEntityList>(jsonResult);

                return new ObservableCollection<ClickStatsEntity>(clickStatsList.ClickStatsList);
            }
            switch (response.StatusCode)
            {
                case HttpStatusCode.Unauthorized:
                    NavigationManager.NavigateTo("/unauthorized");
                    break;
                default:
                    NavigationManager.NavigateTo("/404");
                    break;
            }
        }
        catch (System.Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
        return null;
    }



    protected override async void OnInitialized()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;

        if (User.IsInRole("admin") || Debugger.IsAttached)
        {
            clickStatsEntities = await UpdateUIList();
            this.isLoading = false;
            StateHasChanged();
            if (clickStatsEntities != null)
                dayCount = "Day(s): " + clickStatsEntities.Count.ToString();
        }
    }
}
