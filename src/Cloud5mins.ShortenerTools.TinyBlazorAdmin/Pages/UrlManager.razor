@page "/urlmanager"


@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ILogger<UrlManager> Logger

@attribute [Authorize(Roles = "admin")] 

<PageTitle>Url Manager</PageTitle>

<h1>Urls Manager</h1>
<h3>Create, Edit, Achives your URLs</h3>

@if (urls.UrlList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateShortUrl">Add New Url</button>

    <SfGrid DataSource="@urls.UrlList" id="grdUrls" AllowPaging="true" AllowSorting="true" AllowFiltering="true">
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(ShortUrlEntity.Timestamp) HeaderText="Timestamp" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
            <GridColumn Width="70" AllowFiltering="false">
                <Template>
                    @{
                        var url = (context as ShortUrlEntity);
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => CopyToClipboardAsync(url.ShortUrl))">Copy</button>
                    }
                </Template>
            </GridColumn>
            <GridColumn Width="250" Field=@nameof(ShortUrlEntity.RowKey) HeaderText="Vanity">
                <Template>
                    @{
                        var url = (context as ShortUrlEntity);
                        <a href="@url.ShortUrl" target="blank">@url.RowKey</a>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(ShortUrlEntity.Title) HeaderText="Title"></GridColumn>
            <GridColumn Field=@nameof(ShortUrlEntity.Url) HeaderText="Url"></GridColumn>
            <GridColumn Width="100" TextAlign="TextAlign.Right" HeaderText="Statistics">
                <Template>
                    @{
                        var url = (context as ShortUrlEntity);
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() =>
                        NavigateToStats(url.RowKey))">
                            ðŸ“Š
                        </button>
                    }
                </Template>
            </GridColumn>
            <GridColumn Width="120">
                <Template>
                    @{
                        var url = (context as ShortUrlEntity);
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditShortUrl(url))">Edit</button>
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => ArchiveShortUrl(url))">Archive</button>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
}


@if (ShowCreatePopup)
{
    <div class="modal fade show" id="createPopup" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Short Url Request</h4>
                    <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <EditForm Model="shortUrlRequest" OnValidSubmit="SaveShortUrl">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                <SfTextBox id="title" Placeholder="Title" FloatLabelType="@FloatLabelType.Auto"
                                           @bind-Value="shortUrlRequest.Title"></SfTextBox>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                <SfTextBox id="url" Placeholder="Url" FloatLabelType="@FloatLabelType.Auto" Width="400px"
                                           @bind-Value="shortUrlRequest.Url"></SfTextBox>  <button disabled="@IsUrlEmpty" type="button" class="btn" style="margin-top: 24px" @onclick=@Generate>
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <span class="magic-wand" aria-hidden="true"></span>
                                    }
                                </button>
                                <ValidationMessage For="@(() => shortUrlRequest.Url)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                <SfTextBox id="message" Placeholder="Message" Width="400px" FloatLabelType="@FloatLabelType.Auto" Multiline="true"
                                           @bind-Value="shortUrlRequest.Message"></SfTextBox>
                                <ValidationMessage For="@(() => shortUrlRequest.Message)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                <SfTextBox id="vanity" Placeholder="Vanity" FloatLabelType="@FloatLabelType.Auto"
                                           @bind-Value="shortUrlRequest.Vanity"></SfTextBox>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                <SfCheckBox id="posttosocial" Label="Post to Social" FloatLabelType="@FloatLabelType.Auto"
                                            @bind-Checked="shortUrlRequest.PostToSocial"></SfCheckBox>
                            </div>
                        </div>
                    </EditForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@SaveShortUrl>Save</button>
                </div>

            </div>
        </div>
    </div>

}


@if (ShowEditPopup)
{
    <div class="modal fade show" id="myModal" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Confirm action</h4>
                    <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                    <EditForm Model="editedUrl" OnValidSubmit="SaveUpdatedShortUrl">
                        <DataAnnotationsValidator />
                        <div>
                            <label for="edit-title">Title</label>
                            <InputText id="edit-title" class="form-control" placeholder="Title or description for this URL" @bind-Value="editedUrl.Title" />
                            <ValidationMessage For="@(() => editedUrl.Title)" />
                        </div>
                        <br />
                        <div>
                            <label for="edit-message">Message</label>
                            <InputTextArea id="edit-message" class="form-control" placeholder="Message" @bind-Value="editedUrl.Message" />
                            <ValidationMessage For="@(() => editedUrl.Message)" />
                        </div>
                        <br />
                        <div>
                            <label for="edit-url">The Url to redirect</label>
                            <InputText id="edit-url" class="form-control" placeholder="The Url to redirect" @bind-Value="editedUrl.Url" />
                            <ValidationMessage For="@(() => editedUrl.Url)" />
                        </div>
                    </EditForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@SaveUpdatedShortUrl>Save</button>
                </div>

            </div>
        </div>
    </div>

}

@code {

    bool ShowCreatePopup = false;
    bool ShowEditPopup = false;
    private ListResponse urls = new ListResponse();
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl;
    SfGrid<ShortUrlEntity> grdUrls;
    public List<ShortUrlEntity> gridData { get; set; }
    private bool isLoading = false;

    private bool IsUrlEmpty => string.IsNullOrEmpty(shortUrlRequest.Url);
    protected override async Task OnInitializedAsync()
    {
        await RefreshGrid();
    }

    private async Task RefreshGrid()
    {
        try
        {
            using var response = await Http.GetAsync("/api/UrlList");
            if (response.IsSuccessStatusCode)
            {
                urls = await response.Content.ReadFromJsonAsync<ListResponse>();
                urls.UrlList = urls.UrlList.OrderByDescending(x => x.Timestamp).ToList();
            }
            else
            {
                switch (response.StatusCode)
                {
                    case HttpStatusCode.Unauthorized:
                        NavigationManager.NavigateTo("/unauthorized");
                        break;
                    default:
                        NavigationManager.NavigateTo("/404");
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private async Task UpdateUIList()
    {
        await RefreshGrid();
        StateHasChanged();
    }
    private async Task SaveShortUrl()
    {
        ShowCreatePopup = false;

        try
        {
            await Http.PostAsJsonAsync<ShortUrlRequest>("/api/UrlCreate", shortUrlRequest);
            await UpdateUIList();
        }
        catch (System.Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }



    private async Task Generate()
    {
        if (!string.IsNullOrEmpty(shortUrlRequest.Url))
        {
            isLoading = true;
            try
            {
                using var response = await Http.PostAsJsonAsync<string>("/api/CreateDescription", shortUrlRequest.Url);
                if (response.IsSuccessStatusCode)
                {
                    var message = await response.Content.ReadFromJsonAsync<string>();
                    shortUrlRequest.Message = message.Replace("\"", string.Empty);
                    isLoading = false;
                }
                else
                {
                    switch (response.StatusCode)
                    {
                        case HttpStatusCode.Unauthorized:
                            NavigationManager.NavigateTo("/unauthorized");
                            break;
                        default:
                            NavigationManager.NavigateTo("/404");
                            break;
                    }
                }
            }
            catch (System.Exception ex)
            {
                isLoading = false;
                Logger.LogError(ex.ToString());
            }
            StateHasChanged();
        }
    }

    void ClosePopup()
    {
        ShowCreatePopup = false;
        ShowEditPopup = false;
    }

    [Authorize(Roles = "admin")]
    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }


    void EditShortUrl(ShortUrlEntity urlEntity)
    {
        editedUrl = urlEntity;
        ShowEditPopup = true;
    }

    private async Task SaveUpdatedShortUrl()
    {
        ShowEditPopup = false;
        await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlUpdate", editedUrl);
        await UpdateUIList();
    }

    private void NavigateToStats(string vanity)
    {
        NavigationManager.NavigateTo("/Statistics/" + vanity);
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        await Http.PostAsJsonAsync<ShortUrlEntity>("/api/UrlArchive", urlEntity);
        await UpdateUIList();
    }

}
